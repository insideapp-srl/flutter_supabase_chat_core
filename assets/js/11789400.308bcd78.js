"use strict";(self.webpackChunkflutter_supabase_chat_core=self.webpackChunkflutter_supabase_chat_core||[]).push([[847],{9710:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var t=a(4848),n=a(8453);const r={id:"supabase-security",title:"Security Rules"},c="Helper functions",o={id:"guides/supabase-security",title:"Security Rules",description:"This is a drop-in example of Postgres Row Security Level designed for a typical chat application.",source:"@site/docs/guides/supabase-security-rls.md",sourceDirName:"guides",slug:"/guides/supabase-security",permalink:"/guides/supabase-security",draft:!1,unlisted:!1,editUrl:"https://github.com/insideapp-srl/flutter_supabase_chat_core/docs/guides/supabase-security-rls.md",tags:[],version:"current",frontMatter:{id:"supabase-security",title:"Security Rules"},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/guides/supabase-usage"},next:{title:"Database Triggers",permalink:"/guides/supabase-triggers"}},i={},l=[{value:"Tables",id:"tables",level:2},{value:"Summary",id:"summary",level:3},{value:"Table <code>chats.users</code>",id:"table-chatsusers",level:4},{value:"Table <code>chats.rooms</code>",id:"table-chatsrooms",level:4},{value:"Table <code>chats.messages</code>",id:"table-chatsmessages",level:4},{value:"Table <code>users</code>",id:"table-users",level:3},{value:"Table <code>rooms</code>",id:"table-rooms",level:3},{value:"Table <code>messages</code>",id:"table-messages",level:3},{value:"Storage buckets",id:"storage-buckets",level:2},{value:"Summary",id:"summary-1",level:3},{value:"Bucket <code>chats_assets</code>",id:"bucket-chats_assets",level:4},{value:"Bucket <code>chats_user_avatar</code>",id:"bucket-chats_user_avatar",level:4},{value:"Bucket <code>chats_assets</code>",id:"bucket-chats_assets-1",level:3},{value:"Bucket <code>chats_user_avatar</code>",id:"bucket-chats_user_avatar-1",level:3}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["This is a drop-in example of ",(0,t.jsx)(s.a,{href:"https://supabase.com/docs/guides/database/postgres/row-level-security",children:"Postgres Row Security Level"})," designed for a typical chat application."]}),"\n",(0,t.jsx)(s.h1,{id:"helper-functions",children:"Helper functions"}),"\n",(0,t.jsx)(s.p,{children:"Security rules make use of some helper functions:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"    DROP function if exists chats.is_auth;\n    CREATE OR REPLACE FUNCTION chats.is_auth()\n        RETURNS boolean\n        LANGUAGE 'plpgsql'\n        COST 100\n        VOLATILE NOT LEAKPROOF SECURITY DEFINER\n    AS $BODY$\n    BEGIN\n    return auth.uid() IS NOT NULL;\n    end;\n    $BODY$;\n    \n    DROP function if exists chats.is_owner;\n    CREATE OR REPLACE FUNCTION chats.is_owner(user_id uuid)\n        RETURNS boolean\n        LANGUAGE 'plpgsql'\n        COST 100\n        VOLATILE NOT LEAKPROOF SECURITY DEFINER\n    AS $BODY$\n    BEGIN\n    return auth.uid() = user_id;\n    end;\n    $BODY$;\n    \n    DROP function if exists chats.is_member;\n    CREATE OR REPLACE FUNCTION chats.is_member(members uuid[])\n        RETURNS boolean\n        LANGUAGE 'plpgsql'\n        COST 100\n        VOLATILE NOT LEAKPROOF SECURITY DEFINER\n    AS $BODY$\n    BEGIN\n    return auth.uid() = ANY(members);\n    end;\n    $BODY$;\n    \n    DROP function if exists chats.is_chat_member;\n    CREATE OR REPLACE FUNCTION chats.is_chat_member(room_id bigint)\n        RETURNS boolean\n        LANGUAGE 'plpgsql'\n        COST 100\n        VOLATILE NOT LEAKPROOF SECURITY DEFINER\n    AS $BODY$\n    DECLARE\n    members uuid[];\n    BEGIN\n    SELECT \"userIds\" INTO members\n    FROM chats.rooms\n    WHERE id = room_id;\n    return chats.is_member(members);\n    end;\n    $BODY$;\n"})}),"\n",(0,t.jsx)(s.h1,{id:"security-rules",children:"Security rules"}),"\n",(0,t.jsx)(s.h2,{id:"tables",children:"Tables"}),"\n",(0,t.jsx)(s.h3,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(s.h4,{id:"table-chatsusers",children:["Table ",(0,t.jsx)(s.code,{children:"chats.users"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"INSERT"})," : Nobody, this table is populate by trigger on auth.users."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"SELECT"})," : All users authenticated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"UPDATE"})," : Only the user himself."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DELETE"})," : Nobody."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"table-chatsrooms",children:["Table ",(0,t.jsx)(s.code,{children:"chats.rooms"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"INSERT"})," : All users authenticated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"SELECT"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"UPDATE"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DELETE"})," : All users who are members of the chat room."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"table-chatsmessages",children:["Table ",(0,t.jsx)(s.code,{children:"chats.messages"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"INSERT"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"SELECT"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"UPDATE"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DELETE"})," : All users who are members of the chat room."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:"Security rules implemented:"}),"\n",(0,t.jsxs)(s.h3,{id:"table-users",children:["Table ",(0,t.jsx)(s.code,{children:"users"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:'    CREATE POLICY "chats.users_grant_create"\n    ON chats.users\n    AS PERMISSIVE\n    FOR INSERT\n    TO public\n    WITH CHECK (false); -- Created by trigger\n    \n    CREATE POLICY "chats.users_grant_read"\n    ON chats.users\n    AS PERMISSIVE\n    FOR SELECT\n    TO public\n    USING (chats.is_auth());\n    \n    CREATE POLICY "chats.users_grant_update"\n    ON chats.users\n    AS PERMISSIVE\n    FOR UPDATE\n    TO public\n    USING (chats.is_auth())\n    WITH CHECK (chats.is_owner(id));\n    \n    CREATE POLICY "chats.users_grant_delete"\n    ON chats.users\n    AS PERMISSIVE\n    FOR DELETE\n    TO public\n    USING (false); -- Delete by foreign key\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"table-rooms",children:["Table ",(0,t.jsx)(s.code,{children:"rooms"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:'    CREATE POLICY "chats.rooms_grant_create"\n        ON chats.rooms\n        AS PERMISSIVE\n        FOR INSERT\n        TO public\n        WITH CHECK (chats.is_auth());\n    \n    CREATE POLICY "chats.rooms_grant_read"\n        ON chats.rooms\n        AS PERMISSIVE\n        FOR SELECT\n        TO public\n        USING (chats.is_member("userIds"));\n    \n    CREATE POLICY "chats.rooms_grant_update"\n        ON chats.rooms\n        AS PERMISSIVE\n        FOR UPDATE\n        TO public\n        USING (chats.is_member("userIds"))\n        WITH CHECK (chats.is_member("userIds"));\n    \n    CREATE POLICY "chats.rooms_grant_delete"\n        ON chats.rooms\n        AS PERMISSIVE\n        FOR DELETE\n        TO public\n        USING (chats.is_member("userIds"));\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"table-messages",children:["Table ",(0,t.jsx)(s.code,{children:"messages"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:'    CREATE POLICY "chats.messages_grant_create"\n        ON chats.messages\n        AS PERMISSIVE\n        FOR INSERT\n        TO public\n        WITH CHECK (chats.is_chat_member("roomId"));\n    \n    CREATE POLICY "chats.messages_grant_read"\n        ON chats.messages\n        AS PERMISSIVE\n        FOR SELECT\n        TO public\n        USING (chats.is_chat_member("roomId"));\n    \n    CREATE POLICY "chats.messages_grant_update"\n        ON chats.messages\n        AS PERMISSIVE\n        FOR UPDATE\n        TO public\n        USING (chats.is_chat_member("roomId"))\n        WITH CHECK (chats.is_chat_member("roomId"));\n    \n    CREATE POLICY "chats.messages_grant_delete"\n        ON chats.messages\n        AS PERMISSIVE\n        FOR DELETE\n        TO public\n        USING (chats.is_chat_member("roomId"));\n'})}),"\n",(0,t.jsx)(s.h2,{id:"storage-buckets",children:"Storage buckets"}),"\n",(0,t.jsx)(s.h3,{id:"summary-1",children:"Summary"}),"\n",(0,t.jsxs)(s.h4,{id:"bucket-chats_assets",children:["Bucket ",(0,t.jsx)(s.code,{children:"chats_assets"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"INSERT"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"SELECT"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"UPDATE"})," : All users who are members of the chat room."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DELETE"})," : All users who are members of the chat room."]}),"\n"]}),"\n",(0,t.jsxs)(s.h4,{id:"bucket-chats_user_avatar",children:["Bucket ",(0,t.jsx)(s.code,{children:"chats_user_avatar"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"INSERT"})," : Only the user himself."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"SELECT"})," : All users authenticated."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"UPDATE"})," : Only the user himself."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DELETE"})," : Only the user himself."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:"Security rules implemented:"}),"\n",(0,t.jsxs)(s.h3,{id:"bucket-chats_assets-1",children:["Bucket ",(0,t.jsx)(s.code,{children:"chats_assets"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:'    DROP policy IF EXISTS "storage.object_grant_create_auth_chats_assets"\n        ON storage.objects;\n    create policy "storage.object_grant_create_auth_chats_assets"\n    on storage.objects for insert\n    with check (\n        bucket_id = \'chats_assets\'\n        and\n        chats.is_chat_member((storage.foldername(name))[1]::bigint));\n    \n    DROP policy IF EXISTS "storage.object_grant_read_auth_chats_assets"\n        ON storage.objects;\n    create policy "storage.object_grant_read_auth_chats_assets"\n    on storage.objects for select\n    using (\n        bucket_id = \'chats_assets\'\n        and\n        chats.is_chat_member((storage.foldername(name))[1]::bigint));\n    \n    DROP policy IF EXISTS "storage.object_grant_update_auth_chats_assets"\n        ON storage.objects;\n    create policy "storage.object_grant_update_auth_chats_assets"\n    on storage.objects for update\n    using (\n        bucket_id = \'chats_assets\'\n        and\n        chats.is_chat_member((storage.foldername(name))[1]::bigint))\n    with check (\n        bucket_id = \'chats_assets\'\n        and\n        chats.is_chat_member((storage.foldername(name))[1]::bigint));\n    \n    DROP policy IF EXISTS "storage.object_grant_delete_auth_chats_assets"\n        ON storage.objects;\n    create policy "storage.object_grant_delete_auth_chats_assets"\n    on storage.objects for delete\n    using (\n        bucket_id = \'chats_assets\'\n        and\n        chats.is_chat_member((storage.foldername(name))[1]::bigint));\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"bucket-chats_user_avatar-1",children:["Bucket ",(0,t.jsx)(s.code,{children:"chats_user_avatar"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:'    DROP policy IF EXISTS "storage.object_grant_create_auth_chats_user_avatar"\n        ON storage.objects;\n    create policy "storage.object_grant_create_auth_chats_user_avatar"\n    on storage.objects for insert\n    with check (\n        bucket_id = \'chats_user_avatar\'\n        and\n        chats.is_owner((storage.foldername(name))[1]::uuid));\n    \n    DROP policy IF EXISTS "storage.object_grant_read_auth_chats_user_avatar"\n        ON storage.objects;\n    create policy "storage.object_grant_read_auth_chats_user_avatar"\n    on storage.objects for select\n    using (\n        bucket_id = \'chats_user_avatar\'\n        and\n        chats.is_auth());\n    \n    DROP policy IF EXISTS "storage.object_grant_update_auth_chats_user_avatar"\n        ON storage.objects;\n    create policy "storage.object_grant_update_auth_chats_user_avatar"\n    on storage.objects for update\n    using (\n        bucket_id = \'chats_user_avatar\'\n        and\n        chats.is_owner((storage.foldername(name))[1]::uuid))\n    with check (\n        bucket_id = \'chats_user_avatar\'\n        and\n        chats.is_owner((storage.foldername(name))[1]::uuid));\n    \n    DROP policy IF EXISTS "storage.object_grant_delete_auth_chats_user_avatar"\n        ON storage.objects;\n    create policy "storage.object_grant_delete_auth_chats_user_avatar"\n    on storage.objects for delete\n    using (\n        bucket_id = \'chats_user_avatar\'\n        and\n        chats.is_owner((storage.foldername(name))[1]::uuid));\n'})}),"\n",(0,t.jsxs)(s.p,{children:["To learn more head over to the ",(0,t.jsx)(s.a,{href:"https://supabase.com/docs/guides/database/postgres/row-level-security",children:"Postgres Row Security Level"})," website."]})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>c,x:()=>o});var t=a(6540);const n={},r=t.createContext(n);function c(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);