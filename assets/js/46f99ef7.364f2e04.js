"use strict";(self.webpackChunkflutter_supabase_chat_core=self.webpackChunkflutter_supabase_chat_core||[]).push([[189],{9828:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/supabase-usage","title":"Usage","description":"As mentioned in How it works?, you will need to register a user using Supabase Authentication. If you are using Supabase Authentication as your auth provider you don\'t need to do anything, a trigger will create a new row in the chat.users table.","source":"@site/docs/guides/supabase-usage.md","sourceDirName":"guides","slug":"/guides/supabase-usage","permalink":"/guides/supabase-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/insideapp-srl/flutter_supabase_chat_core/docs/guides/supabase-usage.md","tags":[],"version":"current","frontMatter":{"id":"supabase-usage","title":"Usage"},"sidebar":"tutorialSidebar","previous":{"title":"Installation supabase_flutter","permalink":"/introduction/supabase-package-installation"},"next":{"title":"Security Rules","permalink":"/guides/supabase-security"}}');var r=t(4848),n=t(8453);const i={id:"supabase-usage",title:"Usage"},o=void 0,c={},l=[{value:"Update user",id:"update-user",level:2},{value:"Supabase Chat users",id:"supabase-chat-users",level:2},{value:"Starting a chat",id:"starting-a-chat",level:2},{value:"Rooms",id:"rooms",level:2},{value:"Messages",id:"messages",level:2},{value:"Send a message",id:"send-a-message",level:3},{value:"Update the message",id:"update-the-message",level:3},{value:"<code>supabaseUser</code>",id:"supabaseuser",level:2}];function d(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["As mentioned in ",(0,r.jsx)(a.a,{href:"/#how-it-works",children:"How it works?"}),", you will need to register a user using ",(0,r.jsx)(a.a,{href:"https://supabase.com/docs/guides/auth",children:"Supabase Authentication"}),". If you are using Supabase Authentication as your auth provider you don't need to do anything, a trigger will create a new row in the ",(0,r.jsx)(a.code,{children:"chat.users"})," table."]}),"\n",(0,r.jsx)(a.h2,{id:"update-user",children:"Update user"}),"\n",(0,r.jsxs)(a.p,{children:["You can provide values like ",(0,r.jsx)(a.code,{children:"firstName"}),", ",(0,r.jsx)(a.code,{children:"imageUrl"})," and ",(0,r.jsx)(a.code,{children:"lastName"})," if you're planning to have a screen with all users available for chat."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"import 'package:flutter_chat_types/flutter_chat_types.dart' as types;\nimport 'package:flutter_supabase_chat_core/flutter_supabase_chat_core.dart';\n\n...\nuser.firstName: 'John';\nuser.imageUrl: 'https://i.pravatar.cc/300';\nuser.lastName: 'Doe';\n\nawait SupabaseChatCore.instance.updateUser(user);\n\n"})}),"\n",(0,r.jsx)(a.h2,{id:"supabase-chat-users",children:"Supabase Chat users"}),"\n",(0,r.jsxs)(a.p,{children:["You can use the ",(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.users()"})," stream which will return all registered users with avatars and names."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:flutter_chat_types/flutter_chat_types.dart' as types;\nimport 'package:flutter_supabase_chat_core/flutter_supabase_chat_core.dart';\n\nclass UsersPage extends StatelessWidget {\n  const UsersPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: StreamBuilder<List<types.User>>(\n        stream: SupabaseChatCore.instance.users(),\n        initialData: const [],\n        builder: (context, snapshot) {\n          // ...\n        },\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"starting-a-chat",children:"Starting a chat"}),"\n",(0,r.jsxs)(a.p,{children:["When you have access to that ",(0,r.jsx)(a.code,{children:"uid"})," or you have the whole ",(0,r.jsx)(a.code,{children:"User"})," class from the ",(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.users()"})," stream, you can call either ",(0,r.jsx)(a.code,{children:"createRoom"})," or ",(0,r.jsx)(a.code,{children:"createGroupRoom"}),". For the group, you will need to additionally provide a name and an optional image."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:flutter_chat_types/flutter_chat_types.dart' as types;\nimport 'package:flutter_supabase_chat_core/flutter_supabase_chat_core.dart';\n\nclass UsersPage extends StatelessWidget {\n  const UsersPage({Key? key}) : super(key: key);\n\n  void _handlePressed(types.User otherUser, BuildContext context) async {\n    final room = await SupabaseChatCore.instance.createRoom(otherUser);\n    // Navigate to the Chat screen\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: StreamBuilder<List<types.User>>(\n        stream: SupabaseChatCore.instance.users(),\n        initialData: const [],\n        builder: (context, snapshot) {\n          // ...\n        },\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"rooms",children:"Rooms"}),"\n",(0,r.jsxs)(a.p,{children:["To render user's rooms you use the ",(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.rooms()"})," stream. ",(0,r.jsx)(a.code,{children:"Room"})," class will have the name and image URL taken either from provided ones for the group or set to the other person's image URL and name. See ",(0,r.jsx)(a.a,{href:"/guides/supabase-security",children:"Security Rules"})," for more info about rooms filtering."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:flutter_chat_types/flutter_chat_types.dart' as types;\nimport 'package:flutter_supabase_chat_core/flutter_supabase_chat_core.dart';\n\nclass RoomsPage extends StatelessWidget {\n  const RoomsPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: StreamBuilder<List<types.Room>>(\n        stream: SupabaseChatCore.instance.rooms(),\n        initialData: const [],\n        builder: (context, snapshot) {\n          // ...\n        },\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"messages",children:"Messages"}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.messages"})," stream will give you access to all messages in the specified room. If you want to have dynamic updates for the room itself, you will need to wrap messages stream with a room stream. See the ",(0,r.jsx)(a.a,{href:"https://github.com/insideapp-srl/flutter_supabase_chat_core/blob/main/example/lib/chat.dart",children:"example"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:flutter_chat_types/flutter_chat_types.dart' as types;\nimport 'package:flutter_supabase_chat_core/flutter_supabase_chat_core.dart';\n\nclass ChatPage extends StatelessWidget {\n  const ChatPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: StreamBuilder<List<types.Message>>(\n        initialData: const [],\n        stream: SupabaseChatCore.instance.messages(widget.room),\n        builder: (context, snapshot) {\n          // ...\n        },\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["If you use Flyer Chat UI you can just pass ",(0,r.jsx)(a.code,{children:"snapshot.data ?? []"})," to the ",(0,r.jsx)(a.code,{children:"messages"})," parameter of the Chat widget. See the ",(0,r.jsx)(a.a,{href:"https://github.com/insideapp-srl/flutter_supabase_chat_core/blob/main/example/lib/chat.dart",children:"example"}),"."]}),"\n",(0,r.jsx)(a.h3,{id:"send-a-message",children:"Send a message"}),"\n",(0,r.jsxs)(a.p,{children:["To send a message use ",(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.sendMessage"}),", it accepts 2 parameters:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Any partial message. Click ",(0,r.jsx)(a.a,{href:"https://docs.flyer.chat/flutter/chat-ui/types",children:"here"})," to learn more about the types or check the ",(0,r.jsx)(a.a,{href:"https://pub.dev/documentation/flutter_chat_types/latest/index.html",children:"API reference"}),". You provide a partial message because Supabase will set fields like ",(0,r.jsx)(a.code,{children:"authorId"}),", ",(0,r.jsx)(a.code,{children:"createdAt"})," and ",(0,r.jsx)(a.code,{children:"id"})," automatically."]}),"\n",(0,r.jsx)(a.li,{children:"Room ID."}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"update-the-message",children:"Update the message"}),"\n",(0,r.jsxs)(a.p,{children:["To update the message use ",(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.updateMessage"}),", it accepts 2 parameters:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Any message. Click ",(0,r.jsx)(a.a,{href:"https://docs.flyer.chat/flutter/chat-ui/types",children:"here"})," to learn more about the types or check the ",(0,r.jsx)(a.a,{href:"https://pub.dev/documentation/flutter_chat_types/latest/index.html",children:"API reference"}),". Use a message you get from the ",(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.messages"})," stream, update it and send as this parameter."]}),"\n",(0,r.jsx)(a.li,{children:"Room ID."}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"supabaseuser",children:(0,r.jsx)(a.code,{children:"supabaseUser"})}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"SupabaseChatCore.instance.supabaseUser"})," is a shortcut you can use to see which user is currently logged in through Supabase Authentication. The returned type comes from the Supabase library and ",(0,r.jsxs)(a.strong,{children:["it is not the same ",(0,r.jsx)(a.code,{children:"User"})," as from the ",(0,r.jsx)(a.code,{children:"flutter_chat_types"})," package"]}),"."]})]})}function u(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>o});var s=t(6540);const r={},n=s.createContext(r);function i(e){const a=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(n.Provider,{value:a},e.children)}}}]);